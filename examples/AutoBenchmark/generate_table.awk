#!/usr/bin/gawk -f
#
# Usage: generate_table.awk [-v USE_REMAP=1] < ${board}.txt
#
# Takes the *.txt file generated by AutoBenchmark.ino and generates an ASCII
# table that can be inserted into the README.md. Collects both sizeof()
# information as well as CPU benchmarks.

BEGIN {
  # Set to 1 when 'SIZEOF' is detected
  collect_sizeof = 0

  # Set to 1 when 'BENCHMARKS' is detected
  collect_benchmarks = 0

  # AutoBenchmark program generates the benchmarks for the TwoWireInterface at
  # the end, to work around the issue where the ESP32 refuses to run any other
  # third party I2C library on the same pins after the native Wire object
  # initialized. But for display purposes, we want to see the numbers for the
  # native TwoWireInterface at the beginning. So use this REMAP array to map
  # the incoming array indexes to their display indexes, so that the
  # TwoWireInterface records are shown just after the Simple*WireInterface
  # records.
  #
  # Format: REMAP[incoming_index] = display_index
  REMAP[0] = 0
  REMAP[1] = 3
  REMAP[2] = 4
  REMAP[3] = 5
  REMAP[4] = 1
  REMAP[5] = 2
}

/^SIZEOF/ {
  collect_sizeof = 1
  collect_benchmarks = 0
  sizeof_index = 0
  next
}

/^BENCHMARKS/ {
  collect_sizeof = 0
  collect_benchmarks = 1
  benchmark_index = 0
  next
}

!/^END/ {
  if (collect_sizeof) {
    s[sizeof_index] = $0
    sizeof_index++
  }
  if (collect_benchmarks) {
    if (USE_REMAP == 1) {
      display_index = REMAP[benchmark_index]
    } else {
      display_index = benchmark_index
    }
    u[display_index]["name"] = $1
    u[display_index]["min"] = $2
    u[display_index]["avg"] = $3
    u[display_index]["max"] = $4
    u[display_index]["samples"] = $5
    benchmark_index++
  }
}

END {
  TOTAL_BENCHMARKS = benchmark_index
  TOTAL_SIZEOF = sizeof_index
  NUM_TRANSFER_BYTES = 9

  printf("Sizes of Objects:\n")
  for (i = 0; i < TOTAL_SIZEOF; i++) {
    print s[i]
  }

  print ""
  print "CPU:"

  printf("+-------------------------------------------+-------------------+----------+\n")
  printf("| Functionality                             |   min/  avg/  max | eff kbps |\n")
  for (i = 0; i < TOTAL_BENCHMARKS; i++) {
    name = u[i]["name"]
    if (name ~ /^SimpleWireInterface/ \
        || name ~ /^TwoWireInterface<TwoWire>,100kHz/ \
        || name ~ /^FeliasFoggWireInterface<SlowSoftWire>/ \
        || name ~ /^TestatoWireInterface<SoftwareWire>,100kHz/) {
      printf("|-------------------------------------------+-------------------+----------|\n")
    }

    # 9 bits/byte (8 bits + ACK/NACK)
    speed = 1000.0 * NUM_TRANSFER_BYTES * 9 / u[i]["avg"]
    printf("| %-41s | %5d/%5d/%5d |   %6.1f |\n",
      name, u[i]["min"], u[i]["avg"], u[i]["max"], speed)

  }
  printf("+-------------------------------------------+-------------------+----------+\n")
}
